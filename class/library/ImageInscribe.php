<?php

/**
 * Вычислает параметры вписываемой области в изображение. Используется как дополнительный функционал для методов класса Image (см. описание методов).
 * @package Astrid Framework
 * @author Александр Шевяков
 * @author Игорь Михальчук
 * @version 1.1
 * @link http://www.it-island.com/astrid/ IT-Island:Astrid
 * */

class ImageInscribe
{
	/**
	 * Содержит текст последней ошибки работы класса
	 * @var string
	 * */
	public $error = "";

	/**
	 * Указывает является ли последняя ошибка критиеской или нет
	 * @var string
	 * */
	public $errorIsFatal = false;

	private static $obj = null;

	//*********************************************************************************

	protected function __construct()
	{
	}

	//*********************************************************************************

	public static function getInstance()
	{
		if(is_null(self::$obj))
		{
			self::$obj = new ImageInscribe();
		}

		return self::$obj;
	}

	//*********************************************************************************

	/**
	 * Расчитывает в зависимости от входящих данных и возвращает массив параметров необходимых для корректного вписания некоторой пямоугольной области в исходное изображение.
	 * Используется как для процесса кадрирования так и для процесса наложения водяного знака.
	 * В случае ошибки работы, заполняет переменную класса $error текстом ошибки и возвращает FALSE.
	 * В случае успеха возвращает массив параматров вписываемой области и исходного изображения.
	 * @param array $options Массив параметров указывающих тип и детали расположения области
	 * "position" => EImagePosition;<br>
	 * "marginX" => "0",//Отступ по иси X, слева или справа от вотермарка, в зависимости от того куда он позиционируется;<br>
	 * "marginY" => "0",//Отступ по иси Y, сверху или снизу от вотермарка, в зависимости от того куда он позиционируется;<br>
	 * "x" => "0",//Четкая кордината вотермарка по оси X на плоскости изображения. Учитывается, если position=EImagePosition::fixed;<br>
	 * "y" => "0",//Четкая кордината вотермарка по оси Y на плоскости изображения. Учитывается, если position=EImagePosition::fixed.<br>
	 * @param int $imgWidth Ширина исходного изображения
	 * @param int $imgHeight Высота исходного изображения
	 * @param int $areaWidth Ширина вписываемой области
	 * @param int $areaHeight Высота вписываемой области
	 *
	 * @return mixed
	 * FALSE - В случае ошибки работы;
	 * array
	 * (
	 * 		"imgX" => "Координата X на исходном изображении, куда надо вписывать область"
	 * 		"imgY" => "Координата Y на исходном изображении, куда надо вписывать область"
	 * 		"areaX" => "Координата X на ИСХОДНОЙ вписываемой области, откуда брать часть этой области, сообственно которая и будет вписыватся в исходное изображение (она отлична от нуля, если вписываемая область не влазит в исходное изображение)"
	 * 		"areaY" => "Координата Y на ИСХОДНОЙ вписываемой области, откуда брать часть этой области, сообственно которая и будет вписыватся в исходное изображение (она отлична от нуля, если вписываемая область не влазит в исходное изображение)"
	 * 		"newAreaWidth" => "НОВАЯ ширина вписываемой области, (может отличатся от переданной ИСХОДНОЙ ширины этой области $areaWidth, если ИСХОДНАЯ вписываема область не влазит в исходное изображение)"
	 * 		"newAreaHeight" => "НОВАЯ высота вписываемой области (может отличатся от переданной ИСХОДНОЙ ширины этой области $areaHeight, если ИСХОДНАЯ вписываема область не влазит в исходное изображение)"
	 * )
	 * */
	public function getInscribeAreaProperties($options, $imgWidth, $imgHeight, $areaWidth, $areaHeight)
	{
		$this->error = "";
		$this->errorIsFatal = false;

		//Проверяем, чтобы параметр был целым число, больше нуля
		if (!Reg::isNum($imgWidth) || (int)$imgWidth <= 0)
		{
			$this->error = "Некорректный параметр ширины исходного изображения";
			$this->errorIsFatal = true;
			return false;
		}
		$imgWidth = (int)$imgWidth;

		//Проверяем, чтобы параметр был целым число, больше нуля
		if (!Reg::isNum($imgHeight) || (int)$imgHeight <= 0)
		{
			$this->error = "Некорректный параметр высоты исходного изображения";
			$this->errorIsFatal = true;
			return false;
		}
		$imgHeight = (int)$imgHeight;

		//Проверяем, чтобы параметр был целым число, больше нуля
		if (!Reg::isNum($areaWidth) || (int)$areaWidth <= 0)
		{
			$this->error = "Некорректный параметр ширины области назначения";
			$this->errorIsFatal = true;
			return false;
		}
		$areaWidth = (int)$areaWidth;

		//Проверяем, чтобы параметр был целым число, больше нуля
		if (!Reg::isNum($areaHeight) || (int)$areaHeight <= 0)
		{
			$this->error = "Некорректный параметр высоты области назначения";
			$this->errorIsFatal = true;
			return false;
		}
		$areaHeight = (int)$areaHeight;

		//Определяем переменные, которые будут содержать результирующие координаты
		$x = 0;
		$y = 0;

		switch($options["position"])
		{
			//----------------------------------------------------------------------------------------------------------

			case EImagePosition::fixed:
			{
				if (isset($options["x"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["x"]) || (int)$options["x"] < 0)
					{
						$this->error = "Некорректный параметр координаты области назначения по оси x";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр координаты области назначения по оси x";
					$this->errorIsFatal = true;
					return false;
				}

				if (isset($options["y"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["y"]) || (int)$options["y"] < 0)
					{
						$this->error = "Некорректный параметр координаты области назначения по оси y";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр координаты области назначения по оси y";
					$this->errorIsFatal = true;
					return false;
				}

				$x = $options["x"];
				$y = $options["y"];

				break;
			}

			//----------------------------------------------------------------------------------------------------------

			case EImagePosition::center:
			{
				$x = ($imgWidth - $areaWidth) / 2;
				$y = ($imgHeight - $areaHeight) / 2;

				break;
			}

			//----------------------------------------------------------------------------------------------------------

			case EImagePosition::leftCenter:
			{
				if (isset($options["marginX"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["marginX"]) || (int)$options["marginX"] < 0)
					{
						$this->error = "Некорректный параметр отступа области назначения по оси x";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр отступа по оси x области назначения";
					$this->errorIsFatal = true;
					return false;
				}

				$x = (int)$options["marginX"];
				$y = ($imgHeight - $areaHeight) / 2;

				break;
			}

			//----------------------------------------------------------------------------------------------------------

			case EImagePosition::rightCenter:
			{
				if (isset($options["marginX"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["marginX"]) || (int)$options["marginX"] < 0)
					{
						$this->error = "Некорректный параметр отступа области назначения по оси x";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр отступа по оси x области назначения";
					$this->errorIsFatal = true;
					return false;
				}

				$x = $imgWidth - $areaWidth - (int)$options["marginX"];
				$y = ($imgHeight - $areaHeight) / 2;

				break;
			}

			//----------------------------------------------------------------------------------------------------------

			case EImagePosition::topLeft:
			{
				if (isset($options["marginX"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["marginX"]) || (int)$options["marginX"] < 0)
					{
						$this->error = "Некорректный параметр отступа области назначения по оси x";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр отступа по оси x области назначения";
					$this->errorIsFatal = true;
					return false;
				}

				if (isset($options["marginY"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["marginY"]) || (int)$options["marginY"] < 0)
					{
						$this->error = "Некорректный параметр отступа области назначения по оси y";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр отступа по оси y области назначения";
					$this->errorIsFatal = true;
					return false;
				}

				$x = $options["marginX"];
				$y = $options["marginY"];

				break;
			}

			//----------------------------------------------------------------------------------------------------------

			case EImagePosition::topRight:
			{
				if (isset($options["marginX"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["marginX"]) || (int)$options["marginX"] < 0)
					{
						$this->error = "Некорректный параметр отступа области назначения по оси x";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр отступа по оси x области назначения";
					$this->errorIsFatal = true;
					return false;
				}

				if (isset($options["marginY"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["marginY"]) || (int)$options["marginY"] < 0)
					{
						$this->error = "Некорректный параметр отступа области назначения по оси y";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр отступа по оси y области назначения";
					$this->errorIsFatal = true;
					return false;
				}

				$x = $imgWidth - $areaWidth - $options["marginX"];
				$y = $options["marginY"];

				break;
			}

			//----------------------------------------------------------------------------------------------------------

			case EImagePosition::bottomLeft:
			{
				if (isset($options["marginX"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["marginX"]) || (int)$options["marginX"] < 0)
					{
						$this->error = "Некорректный параметр отступа области назначения по оси x";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр отступа по оси x области назначения";
					$this->errorIsFatal = true;
					return false;
				}

				if (isset($options["marginY"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["marginY"]) || (int)$options["marginY"] < 0)
					{
						$this->error = "Некорректный параметр отступа области назначения по оси y";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр отступа по оси y области назначения";
					$this->errorIsFatal = true;
					return false;
				}

				$x = $options["marginX"];
				$y = $imgHeight - $areaHeight - $options["marginY"];

				break;
			}

			//----------------------------------------------------------------------------------------------------------

			case EImagePosition::bottomRight:
			{
				if (isset($options["marginX"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["marginX"]) || (int)$options["marginX"] < 0)
					{
						$this->error = "Некорректный параметр отступа области назначения по оси x";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр отступа по оси x области назначения";
					$this->errorIsFatal = true;
					return false;
				}

				if (isset($options["marginY"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["marginY"]) || (int)$options["marginY"] < 0)
					{
						$this->error = "Некорректный параметр отступа области назначения по оси y";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр отступа по оси y области назначения";
					$this->errorIsFatal = true;
					return false;
				}

				$x = $imgWidth - $areaWidth - $options["marginX"];
				$y = $imgHeight - $areaHeight - $options["marginY"];

				break;
			}

			//----------------------------------------------------------------------------------------------------------

			case EImagePosition::topCenter:
			{
				if (isset($options["marginY"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["marginY"]) || (int)$options["marginY"] < 0)
					{
						$this->error = "Некорректный параметр отступа области назначения по оси y";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр отступа по оси y области назначения";
					$this->errorIsFatal = true;
					return false;
				}

				$x = ($imgWidth - $areaWidth) / 2;
				$y = $options["marginY"];

				break;
			}

			//----------------------------------------------------------------------------------------------------------

			case EImagePosition::bottomCenter:
			{
				if (isset($options["marginY"]))
				{
					//Проверяем, чтобы параметр был целым числом, больше или равен нуля
					if (!Reg::isNum($options["marginY"]) || (int)$options["marginY"] < 0)
					{
						$this->error = "Некорректный параметр отступа области назначения по оси y";
						$this->errorIsFatal = true;
						return false;
					}
				}
				else
				{
					$this->error = "Не указан параметр отступа по оси y области назначения";
					$this->errorIsFatal = true;
					return false;
				}

				$x = ($imgWidth - $areaWidth) / 2;
				$y = $imgHeight - $areaHeight - $options["marginY"];

				break;
			}

			//----------------------------------------------------------------------------------------------------------

			default:
			{
				$this->error = "Некорректный параметр позиции области назначения [".$options["position"]."]";
				$this->errorIsFatal = true;
				return false;
			}
		}

		$x = (int)$x;
		$y = (int)$y;

		//Если вписываемая область выходит за границы исходного изображения, то будет произведен пересчет параметров всписываемой области
		if (false === ($propertiesArray = $this->fitArea($imgWidth, $imgHeight, $x, $y, $areaWidth, $areaHeight)))
		{
			return false;
		}
		else
		{
			return $propertiesArray;
		}
	}

	//*********************************************************************************

	/**
	 * Провряет вписивыается ли область в границы исходного изображения.
	 * В случае, если область не вписываеться, пересчитывает параметры для части этой области, которая точно впишется в исходное изображение
	 * В случае ошибки, заполняет переменную класса $error и возвращает FALSE
	 * ВНИМАНИЕ! Передаваемые параметры должны иметь тип int!!! Они не проверяются для увеличения производительности системы
	 * @param int $imgWidth Ширина исходного изображения
	 * @param int $imgHeight Высота исходного изображения
	 * @param int $imgX Координата по оси X левой верхней точки вписываемой области в плоскости исходного изображения
	 * @param int $imgY Координата по оси Y левой верхней точки вписываемой области в плоскости исходного изображения
	 *
	 * @return bool FALSE - в случае ошибки; array - пересчитанные координаты и размеры области (или ее части) и изображения
	 * array
	 * (
	 * 		"imgX" => "Координата X на исходном изображении, куда надо вписывать область"
	 * 		"imgY" => "Координата Y на исходном изображении, куда надо вписывать область"
	 * 		"areaX" => "Координата X на ИСХОДНОЙ вписываемой области, откуда брать часть этой области, сообственно которая и будет вписыватся в исходное изображение (она отлична от нуля, если вписываемая область не влазит в исходное изображение)"
	 * 		"areaY" => "Координата Y на ИСХОДНОЙ вписываемой области, откуда брать часть этой области, сообственно которая и будет вписыватся в исходное изображение (она отлична от нуля, если вписываемая область не влазит в исходное изображение)"
	 * 		"newAreaWidth" => "НОВАЯ ширина вписываемой области, (может отличатся от переданной ИСХОДНОЙ ширины этой области $areaWidth, если ИСХОДНАЯ вписываема область не влазит в исходное изображение)"
	 * 		"newAreaHeight" => "НОВАЯ высота вписываемой области (может отличатся от переданной ИСХОДНОЙ ширины этой области $areaHeight, если ИСХОДНАЯ вписываема область не влазит в исходное изображение)"
	 * )
	 * */
	private function fitArea($imgWidth, $imgHeight, $imgX, $imgY, $areaWidth, $areaHeight)
	{
		/** ВНИМАНИЕ! Не менять последовательность проверок! */

		$this->error = "";
		$this->errorIsFatal = false;

		$areaX = 0;
		$areaY = 0;

		$newAreaWidth = $areaWidth;
		$newAreaHeight = $areaHeight;

		//----------------------------------------------

		//Проверка выходит ли вся вписывамая область за ЛЕВУЮ и ПРАВУЮ границы изображения

		//Проверяем не выходит ли вся вписываемая область за ЛЕВУЮ границу исходного изображения
		if (($imgX < 0) && ($newAreaWidth <= (-1 * $imgX)))
		{
			$this->error = "Вписываемая область полностью выходит за левую границу изображения";
			$this->errorIsFatal = false;
			return false;
		}

		//Если координата по оси X выходит за ПРАВУЮ границу изображения, то необходимо выдать ошибку
		if ($imgX > $imgWidth)
		{
			$this->error = "Вписываемая область полностью выходит за правую границу изображения";
			$this->errorIsFatal = false;
			return false;
		}

		//----------------------------------------------

		//Проверка выходит ли вся вписывамая область за ВЕРХНЮЮ и НИЖНЮЮ границы изображения

		//Проверяем не выходит ли вся вписываемая область за НИЖНЮЮ границу исходного изображения
		if (($imgY < 0) && ($newAreaHeight <= (-1 * $imgY)))
		{
			$this->error = "Вписываемая область полностью выходит за верхнюю границу изображения";
			$this->errorIsFatal = false;
			return false;
		}

		//Если координата по оси Y выходит за НИЖНЮЮ границу изображения, то необходимо выдать ошибку
		if ($imgY > $imgHeight)
		{
			$this->error = "Вписываемая область полностью выходит за нижнюю границу изображения";
			$this->errorIsFatal = false;
			return false;
		}

		//----------------------------------------------

		//Если координата по оси X выходит за левую границу исходного изображения, то часть вписываемой области будет уменьшена на эту величину выхода
		if ($imgX < 0)
		{
			//Координата по оси X части вписываемой области будет равна величине выхода вписаемой области за границу исходного изображения
			$areaX = -1 * $imgX;
			//Получаем ширину части вписываемой области, сообственно которая и будет вписыватся в исходное изображение. Для этого отнимаем от ширины вписываемой области часть, которая выходит за левую границу исходного изображения (x отрицательное число!!!)
			$newAreaWidth += $imgX;
			//Координата по оси X на исходном изображении куда будет вписыватся вписываемая область теперь будет на левой границе этого изображения
			$imgX = 0;
		}

		//Если вписываемая область выходит за правую границу исходного изображения, то часть вписываемой области будет уменьшена на эту величину выхода
		if (($imgX + $newAreaWidth) >= $imgWidth)
		{
			//Получаем ширину части вписываемой области, сообственно которая и будет вписыватся в исходное изображение. Для этого отнимаем от ширины вписываемой области часть, которая выходит за правую границу исходного изображения
			$newAreaWidth = $newAreaWidth - (($imgX + $newAreaWidth) - $imgWidth);
		}

		//----------------------------------------------

		//Если координата по оси Y выходит за верхнюю границу исходного изображения, то часть вписываемой области будет уменьшена на эту величину выхода
		if ($imgY < 0)
		{
			//Координата по оси Y части вписываемой области будет равна величине выхода вписаемой области за границу исходного изображения
			$areaY = -1 * $imgY;
			//Получаем высоту части вписываемой области, сообственно которая и будет вписыватся в исходное изображение. Для этого отнимаем от высоты вписываемой области часть, которая выходит за верхнюю границу исходного изображения (y отрицательное число!!!)
			$newAreaHeight += $imgY;
			//Координата по оси Y на исходном изображении куда будет вписыватся вписываемая область теперь будет на верхней границе этого изображения
			$imgY = 0;
		}

		//Если вписываемая область выходит за нижнюю границу исходного изображения, то часть вписываемой области будет уменьшена на эту величину выхода
		if (($imgY + $newAreaHeight) >= $imgHeight)
		{
			//Получаем высоту части вписываемой области, сообственно которая и будет вписыватся в исходное изображение. Для этого отнимаем от высоты вписываемой области часть, которая выходит за нижнюю границу исходного изображения
			$newAreaHeight = $newAreaHeight - (($imgY + $newAreaHeight) - $imgHeight);
		}

		//----------------------------------------------

		return array
		(
			"imgX" => $imgX,
			"imgY" => $imgY,
			"areaX" => $areaX,
			"areaY" => $areaY,
			"newAreaWidth" => $newAreaWidth,
			"newAreaHeight" => $newAreaHeight,
		);
	}

	//*********************************************************************************
}
?>